// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: topchain/subscription/deal.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Deal_Status int32

const (
	Deal_UNDEFINED   Deal_Status = 0
	Deal_SCHEDULED   Deal_Status = 1
	Deal_INITIALIZED Deal_Status = 2
	Deal_ACTIVE      Deal_Status = 3
	Deal_INACTIVE    Deal_Status = 4
	Deal_CANCELLED   Deal_Status = 5
	Deal_EXPIRED     Deal_Status = 6
)

var Deal_Status_name = map[int32]string{
	0: "UNDEFINED",
	1: "SCHEDULED",
	2: "INITIALIZED",
	3: "ACTIVE",
	4: "INACTIVE",
	5: "CANCELLED",
	6: "EXPIRED",
}

var Deal_Status_value = map[string]int32{
	"UNDEFINED":   0,
	"SCHEDULED":   1,
	"INITIALIZED": 2,
	"ACTIVE":      3,
	"INACTIVE":    4,
	"CANCELLED":   5,
	"EXPIRED":     6,
}

func (x Deal_Status) String() string {
	return proto.EnumName(Deal_Status_name, int32(x))
}

func (Deal_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9de14b4f09b5e255, []int{0, 0}
}

type Deal struct {
	Id              string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Requester       string      `protobuf:"bytes,2,opt,name=requester,proto3" json:"requester,omitempty"`
	CroId           string      `protobuf:"bytes,3,opt,name=cro_id,json=croId,proto3" json:"cro_id,omitempty"`
	SubscriptionIds []string    `protobuf:"bytes,4,rep,name=subscription_ids,json=subscriptionIds,proto3" json:"subscription_ids,omitempty"`
	Status          Deal_Status `protobuf:"varint,5,opt,name=status,proto3,enum=topchain.subscription.Deal_Status" json:"status,omitempty"`
	TotalAmount     uint64      `protobuf:"varint,6,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	AvailableAmount uint64      `protobuf:"varint,7,opt,name=available_amount,json=availableAmount,proto3" json:"available_amount,omitempty"`
	StartBlock      uint64      `protobuf:"varint,8,opt,name=start_block,json=startBlock,proto3" json:"start_block,omitempty"`
	EpochSize       uint64      `protobuf:"varint,9,opt,name=epoch_size,json=epochSize,proto3" json:"epoch_size,omitempty"`
	NumEpochs       uint64      `protobuf:"varint,10,opt,name=num_epochs,json=numEpochs,proto3" json:"num_epochs,omitempty"`
	InitialFrontier []string    `protobuf:"bytes,11,rep,name=initial_frontier,json=initialFrontier,proto3" json:"initial_frontier,omitempty"`
}

func (m *Deal) Reset()         { *m = Deal{} }
func (m *Deal) String() string { return proto.CompactTextString(m) }
func (*Deal) ProtoMessage()    {}
func (*Deal) Descriptor() ([]byte, []int) {
	return fileDescriptor_9de14b4f09b5e255, []int{0}
}
func (m *Deal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Deal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Deal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Deal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deal.Merge(m, src)
}
func (m *Deal) XXX_Size() int {
	return m.Size()
}
func (m *Deal) XXX_DiscardUnknown() {
	xxx_messageInfo_Deal.DiscardUnknown(m)
}

var xxx_messageInfo_Deal proto.InternalMessageInfo

func (m *Deal) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Deal) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

func (m *Deal) GetCroId() string {
	if m != nil {
		return m.CroId
	}
	return ""
}

func (m *Deal) GetSubscriptionIds() []string {
	if m != nil {
		return m.SubscriptionIds
	}
	return nil
}

func (m *Deal) GetStatus() Deal_Status {
	if m != nil {
		return m.Status
	}
	return Deal_UNDEFINED
}

func (m *Deal) GetTotalAmount() uint64 {
	if m != nil {
		return m.TotalAmount
	}
	return 0
}

func (m *Deal) GetAvailableAmount() uint64 {
	if m != nil {
		return m.AvailableAmount
	}
	return 0
}

func (m *Deal) GetStartBlock() uint64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

func (m *Deal) GetEpochSize() uint64 {
	if m != nil {
		return m.EpochSize
	}
	return 0
}

func (m *Deal) GetNumEpochs() uint64 {
	if m != nil {
		return m.NumEpochs
	}
	return 0
}

func (m *Deal) GetInitialFrontier() []string {
	if m != nil {
		return m.InitialFrontier
	}
	return nil
}

func init() {
	proto.RegisterEnum("topchain.subscription.Deal_Status", Deal_Status_name, Deal_Status_value)
	proto.RegisterType((*Deal)(nil), "topchain.subscription.Deal")
}

func init() { proto.RegisterFile("topchain/subscription/deal.proto", fileDescriptor_9de14b4f09b5e255) }

var fileDescriptor_9de14b4f09b5e255 = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x9b, 0xfe, 0xc9, 0x96, 0x37, 0x63, 0x8d, 0x2c, 0x4d, 0xf2, 0x81, 0x85, 0xd0, 0x53,
	0xb9, 0x64, 0x12, 0x1c, 0x90, 0xb8, 0x75, 0x8d, 0x27, 0x2c, 0x55, 0x11, 0x4a, 0x37, 0x84, 0x76,
	0x89, 0xdc, 0xc4, 0x68, 0x16, 0x69, 0x1c, 0x62, 0x07, 0xc1, 0x3e, 0x05, 0x1f, 0x8b, 0xe3, 0x8e,
	0x1c, 0x51, 0xfb, 0x29, 0xb8, 0xa1, 0xb8, 0x59, 0x29, 0x12, 0xc7, 0xf7, 0xf7, 0xfc, 0xde, 0xe8,
	0x89, 0xf5, 0x42, 0xa0, 0x65, 0x95, 0xdd, 0x31, 0x51, 0x5e, 0xa8, 0x66, 0xa5, 0xb2, 0x5a, 0x54,
	0x5a, 0xc8, 0xf2, 0x22, 0xe7, 0xac, 0x08, 0xab, 0x5a, 0x6a, 0x89, 0xce, 0x1e, 0x8d, 0xf0, 0xd0,
	0x98, 0xfc, 0x1e, 0xc0, 0x30, 0xe2, 0xac, 0x40, 0xa7, 0xd0, 0x17, 0x39, 0xb6, 0x02, 0x6b, 0xea,
	0x24, 0x7d, 0x91, 0xa3, 0xa7, 0xe0, 0xd4, 0xfc, 0x73, 0xc3, 0x95, 0xe6, 0x35, 0xee, 0x1b, 0xfc,
	0x17, 0xa0, 0x33, 0xb0, 0xb3, 0x5a, 0xa6, 0x22, 0xc7, 0x03, 0x13, 0x8d, 0xb2, 0x5a, 0xd2, 0x1c,
	0xbd, 0x00, 0xef, 0xf0, 0xeb, 0xa9, 0xc8, 0x15, 0x1e, 0x06, 0x83, 0xa9, 0x93, 0x8c, 0x0f, 0x39,
	0xcd, 0x15, 0x7a, 0x03, 0xb6, 0xd2, 0x4c, 0x37, 0x0a, 0x8f, 0x02, 0x6b, 0x7a, 0xfa, 0x72, 0x12,
	0xfe, 0xb7, 0x60, 0xd8, 0x96, 0x0b, 0x97, 0xc6, 0x4c, 0xba, 0x0d, 0xf4, 0x1c, 0x4e, 0xb4, 0xd4,
	0xac, 0x48, 0xd9, 0x5a, 0x36, 0xa5, 0xc6, 0x76, 0x60, 0x4d, 0x87, 0x89, 0x6b, 0xd8, 0xcc, 0xa0,
	0xb6, 0x09, 0xfb, 0xc2, 0x44, 0xc1, 0x56, 0x05, 0x7f, 0xd4, 0x8e, 0x8c, 0x36, 0xde, 0xf3, 0x4e,
	0x7d, 0x06, 0xae, 0xd2, 0xac, 0xd6, 0xe9, 0xaa, 0x90, 0xd9, 0x27, 0x7c, 0x6c, 0x2c, 0x30, 0xe8,
	0xb2, 0x25, 0xe8, 0x1c, 0x80, 0x57, 0x32, 0xbb, 0x4b, 0x95, 0xb8, 0xe7, 0xd8, 0x31, 0xb9, 0x63,
	0xc8, 0x52, 0xdc, 0xf3, 0x36, 0x2e, 0x9b, 0x75, 0x6a, 0x80, 0xc2, 0xb0, 0x8b, 0xcb, 0x66, 0x4d,
	0x0c, 0x68, 0x9b, 0x88, 0x52, 0x68, 0xc1, 0x8a, 0xf4, 0x63, 0x2d, 0x4b, 0x2d, 0x78, 0x8d, 0xdd,
	0xdd, 0x9b, 0x74, 0xfc, 0xaa, 0xc3, 0x93, 0x35, 0xd8, 0xbb, 0x3f, 0x45, 0x4f, 0xc0, 0xb9, 0x89,
	0x23, 0x72, 0x45, 0x63, 0x12, 0x79, 0xbd, 0x76, 0x5c, 0xce, 0xdf, 0x92, 0xe8, 0x66, 0x41, 0x22,
	0xcf, 0x42, 0x63, 0x70, 0x69, 0x4c, 0xaf, 0xe9, 0x6c, 0x41, 0x6f, 0x49, 0xe4, 0xf5, 0x11, 0x80,
	0x3d, 0x9b, 0x5f, 0xd3, 0xf7, 0xc4, 0x1b, 0xa0, 0x13, 0x38, 0xa6, 0x71, 0x37, 0x0d, 0xdb, 0xcd,
	0xf9, 0x2c, 0x9e, 0x93, 0x45, 0xbb, 0x39, 0x42, 0x2e, 0x1c, 0x91, 0x0f, 0xef, 0x68, 0x42, 0x22,
	0xcf, 0xbe, 0x7c, 0xfd, 0x63, 0xe3, 0x5b, 0x0f, 0x1b, 0xdf, 0xfa, 0xb5, 0xf1, 0xad, 0xef, 0x5b,
	0xbf, 0xf7, 0xb0, 0xf5, 0x7b, 0x3f, 0xb7, 0x7e, 0xef, 0xf6, 0x7c, 0x7f, 0x4e, 0x5f, 0xff, 0x3d,
	0x28, 0xfd, 0xad, 0xe2, 0x6a, 0x65, 0x9b, 0x93, 0x7a, 0xf5, 0x27, 0x00, 0x00, 0xff, 0xff, 0x0c,
	0x0a, 0x63, 0x23, 0x76, 0x02, 0x00, 0x00,
}

func (m *Deal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Deal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InitialFrontier) > 0 {
		for iNdEx := len(m.InitialFrontier) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.InitialFrontier[iNdEx])
			copy(dAtA[i:], m.InitialFrontier[iNdEx])
			i = encodeVarintDeal(dAtA, i, uint64(len(m.InitialFrontier[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.NumEpochs != 0 {
		i = encodeVarintDeal(dAtA, i, uint64(m.NumEpochs))
		i--
		dAtA[i] = 0x50
	}
	if m.EpochSize != 0 {
		i = encodeVarintDeal(dAtA, i, uint64(m.EpochSize))
		i--
		dAtA[i] = 0x48
	}
	if m.StartBlock != 0 {
		i = encodeVarintDeal(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x40
	}
	if m.AvailableAmount != 0 {
		i = encodeVarintDeal(dAtA, i, uint64(m.AvailableAmount))
		i--
		dAtA[i] = 0x38
	}
	if m.TotalAmount != 0 {
		i = encodeVarintDeal(dAtA, i, uint64(m.TotalAmount))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintDeal(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SubscriptionIds) > 0 {
		for iNdEx := len(m.SubscriptionIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SubscriptionIds[iNdEx])
			copy(dAtA[i:], m.SubscriptionIds[iNdEx])
			i = encodeVarintDeal(dAtA, i, uint64(len(m.SubscriptionIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CroId) > 0 {
		i -= len(m.CroId)
		copy(dAtA[i:], m.CroId)
		i = encodeVarintDeal(dAtA, i, uint64(len(m.CroId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintDeal(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDeal(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDeal(dAtA []byte, offset int, v uint64) int {
	offset -= sovDeal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Deal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDeal(uint64(l))
	}
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovDeal(uint64(l))
	}
	l = len(m.CroId)
	if l > 0 {
		n += 1 + l + sovDeal(uint64(l))
	}
	if len(m.SubscriptionIds) > 0 {
		for _, s := range m.SubscriptionIds {
			l = len(s)
			n += 1 + l + sovDeal(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovDeal(uint64(m.Status))
	}
	if m.TotalAmount != 0 {
		n += 1 + sovDeal(uint64(m.TotalAmount))
	}
	if m.AvailableAmount != 0 {
		n += 1 + sovDeal(uint64(m.AvailableAmount))
	}
	if m.StartBlock != 0 {
		n += 1 + sovDeal(uint64(m.StartBlock))
	}
	if m.EpochSize != 0 {
		n += 1 + sovDeal(uint64(m.EpochSize))
	}
	if m.NumEpochs != 0 {
		n += 1 + sovDeal(uint64(m.NumEpochs))
	}
	if len(m.InitialFrontier) > 0 {
		for _, s := range m.InitialFrontier {
			l = len(s)
			n += 1 + l + sovDeal(uint64(l))
		}
	}
	return n
}

func sovDeal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDeal(x uint64) (n int) {
	return sovDeal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Deal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CroId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CroId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionIds = append(m.SubscriptionIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Deal_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			m.TotalAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableAmount", wireType)
			}
			m.AvailableAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvailableAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochSize", wireType)
			}
			m.EpochSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEpochs", wireType)
			}
			m.NumEpochs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEpochs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialFrontier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialFrontier = append(m.InitialFrontier, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDeal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDeal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDeal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDeal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDeal = fmt.Errorf("proto: unexpected end of group")
)
